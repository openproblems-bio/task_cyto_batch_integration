import anndata as ad
import numpy as np
import sys

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
  'input_validation': 'resources_test/.../validation.h5ad',
  'input_unintegrated': 'resources_test/.../unintegrated.h5ad',
  'input_integrated': 'resources_test/.../integrated.h5ad',
  'output': 'output.h5ad'
}
meta = {
  'name': 'n_inconsistent_peaks'
}
## VIASH END

sys.path.append(meta["resources_dir"])
from helper import get_kde_density, call_peaks
from helper_functions import get_obs_var_for_integrated, subset_markers_tocorrect, subset_nocontrols

print('Reading input files', flush=True)
input_validation = ad.read_h5ad(par['input_validation'])
input_unintegrated = ad.read_h5ad(par['input_unintegrated'])
input_integrated = ad.read_h5ad(par['input_integrated'])

print('Formatting input files', flush=True)
#Format data integrated data
input_integrated = get_obs_var_for_integrated(input_integrated,input_validation,input_unintegrated)
input_integrated = subset_markers_tocorrect(input_integrated)
input_integrated = subset_nocontrols(input_integrated)
#Format validation data
input_validation = subset_markers_tocorrect(input_validation)

print('Compute metric (All cells)', flush=True)
donor_list = input_integrated.obs['donor'].unique()
n_inconsistent_peaks = 0

for donor in donor_list:
    integrated_view = input_integrated[input_integrated.obs['donor'] == donor]
    validation_view = input_validation[input_validation.obs['donor'] == donor]

    for marker in integrated_view.var.index:
        mexp_integrated = np.array(integrated_view[:,marker].layers["integrated"])
        mexp_validation = np.array(validation_view[:,marker].layers["preprocessed"])
        density_integrated = get_kde_density(mexp_integrated)
        peaks_integrated = call_peaks(density_integrated)
        density_validation = get_kde_density(mexp_validation)
        peaks_validation = call_peaks(density_validation)

        if peaks_integrated != peaks_validation:
            n_inconsistent_peaks += abs(peaks_integrated - peaks_validation)

print('Compute metric (per cell type)', flush=True)
n_inconsistent_peaks_ct = 0

for donor in donor_list:
    integrated_view = input_integrated[input_integrated.obs['donor'] == donor]
    validation_view = input_validation[input_validation.obs['donor'] == donor]
    celltype_list = integrated_view.obs['cell_type'].unique()

    for celltype in celltype_list:
        integrated_view_ct = integrated_view[integrated_view.obs['cell_type'] == celltype]
        validation_view_ct = validation_view[validation_view.obs['cell_type'] == celltype]

        if integrated_view_ct.shape[0] < 100 or validation_view_ct.shape[0] < 100:
          print(donor,celltype,"skipped cause less than 100 cells are present in either integrated or validation dataset")
          continue

        for marker in integrated_view_ct.var.index:
            mexp_integrated = np.array(integrated_view_ct[:, marker].layers["integrated"])
            mexp_validation = np.array(validation_view_ct[:, marker].layers["preprocessed"])
            density_integrated = get_kde_density(mexp_integrated)
            peaks_integrated = call_peaks(density_integrated)
            density_validation = get_kde_density(mexp_validation)
            peaks_validation = call_peaks(density_validation)

            if peaks_integrated != peaks_validation:
                n_inconsistent_peaks_ct += abs(peaks_integrated - peaks_validation)



uns_metric_ids = ['n_inconsistent_peaks', 'n_inconsistent_peaks_ct']
uns_metric_values = [ n_inconsistent_peaks, n_inconsistent_peaks_ct ]

print("Write output AnnData to file", flush=True)
output = ad.AnnData(
    uns={
    'dataset_id': input_integrated.uns['dataset_id'],
    'method_id': input_integrated.uns['method_id'],
    'metric_ids': uns_metric_ids,
    'metric_values': uns_metric_values
  }
)
output.write_h5ad(par['output'], compression='gzip')
