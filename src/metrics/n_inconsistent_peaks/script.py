import sys

import anndata as ad
import numpy as np

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input_unintegrated': 'resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/unintegrated.h5ad',
  'input_integrated_split1': 'resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/integrated_split1.h5ad',
  'input_integrated_split2': 'resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/integrated_split2.h5ad',
  'output': 'resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/score.h5ad'
}
meta = {
  'name': 'n_inconsistent_peaks',
}


## VIASH END

sys.path.append(meta["resources_dir"])
from helper import call_peaks, get_kde_density
from helper_functions import (
    get_obs_var_for_integrated,
    remove_unlabelled,
    subset_markers_tocorrect,
    subset_nocontrols,
)

print("Reading input files", flush=True)
integrated_s1 = ad.read_h5ad(par["input_integrated_split1"])
integrated_s2 = ad.read_h5ad(par["input_integrated_split2"])
unintegrated = ad.read_h5ad(par["input_unintegrated"])

print("Formatting input files", flush=True)
integrated_s1, integrated_s2 = get_obs_var_for_integrated(
    integrated_s1, integrated_s2, unintegrated
)

integrated_s1 = subset_nocontrols(integrated_s1)
integrated_s1 = subset_markers_tocorrect(integrated_s1)
integrated_s1 = subset_nocontrols(integrated_s1)
integrated_s1 = remove_unlabelled(integrated_s1)

integrated_s2 = subset_nocontrols(integrated_s2)
integrated_s2 = subset_markers_tocorrect(integrated_s2)
integrated_s2 = subset_nocontrols(integrated_s2)
integrated_s2 = remove_unlabelled(integrated_s2)

print('Compute metric (All cells)', flush=True)
donor_list = integrated_s1.obs['donor'].unique()
n_inconsistent_peaks = 0

for donor in donor_list:
    s1_view = integrated_s1[integrated_s1.obs['donor'] == donor]
    s2_view = integrated_s2[integrated_s2.obs['donor'] == donor]

    for marker in s1_view.var.index:
        mexp_integrated = np.array(s1_view[:,marker].layers["integrated"])
        mexp_validation = np.array(s2_view[:,marker].layers["integrated"])
        density_integrated = get_kde_density(mexp_integrated)
        peaks_integrated = call_peaks(density_integrated)
        density_validation = get_kde_density(mexp_validation)
        peaks_validation = call_peaks(density_validation)

        if peaks_integrated != peaks_validation:
            n_inconsistent_peaks += abs(peaks_integrated - peaks_validation)

print('Compute metric (per cell type)', flush=True)
n_inconsistent_peaks_ct = 0

for donor in donor_list:
    s1_view = integrated_s1[integrated_s1.obs['donor'] == donor]
    s2_view = integrated_s2[integrated_s2.obs['donor'] == donor]
    celltype_list = s1_view.obs['cell_type'].unique()

    for celltype in celltype_list:
        s1_view_ct = s1_view[s1_view.obs['cell_type'] == celltype]
        s2_view_ct = s2_view[s2_view.obs['cell_type'] == celltype]

        if s1_view_ct.shape[0] < 100 or s2_view_ct.shape[0] < 100:
          print(donor,celltype,"skipped cause less than 100 cells are present in either integrated or validation dataset")
          continue

        for marker in s1_view_ct.var.index:
            mexp_integrated = np.array(s1_view_ct[:, marker].layers["integrated"])
            mexp_validation = np.array(s2_view_ct[:, marker].layers["integrated"])
            density_integrated = get_kde_density(mexp_integrated)
            peaks_integrated = call_peaks(density_integrated)
            density_validation = get_kde_density(mexp_validation)
            peaks_validation = call_peaks(density_validation)

            if peaks_integrated != peaks_validation:
                n_inconsistent_peaks_ct += abs(peaks_integrated - peaks_validation)



uns_metric_ids = ['n_inconsistent_peaks', 'n_inconsistent_peaks_ct']
uns_metric_values = [ float(n_inconsistent_peaks), float(n_inconsistent_peaks_ct) ]

print("Write output AnnData to file", flush=True)
output = ad.AnnData(
    uns={
    'dataset_id': integrated_s1.uns['dataset_id'],
    'method_id': integrated_s1.uns['method_id'],
    'metric_ids': uns_metric_ids,
    'metric_values': uns_metric_values
  }
)
output.write_h5ad(par['output'], compression='gzip')

print(uns_metric_ids, uns_metric_values)