import anndata as ad
import scib_metrics as sm
import numpy as np
import sys

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
  'input_unintegrated': 'resources_test/.../unintegrated.h5ad',
  'input_integrated_split1': 'resources_test/.../integrated_split1.h5ad',
  'input_integrated_split2': 'resources_test/.../integrated_split2.h5ad',
  'output': 'output.h5ad'
}
meta = {
  'name': 'lisi'
}
## VIASH END

sys.path.append(meta["resources_dir"])
from helper_functions import (
    get_obs_var_for_integrated,
    subset_markers_tocorrect,
)

print('Reading input files', flush=True)
input_unintegrated = ad.read_h5ad(par['input_unintegrated'])
input_integrated_split1 = ad.read_h5ad(par['input_integrated_split1'])
input_integrated_split2 = ad.read_h5ad(par['input_integrated_split2'])

print("Formatting input files", flush=True)
integrated_s1, integrated_s2 = get_obs_var_for_integrated(
    input_integrated_split1, input_integrated_split2, input_unintegrated
)
integrated_s1 = subset_markers_tocorrect(integrated_s1)
integrated_s2 = subset_markers_tocorrect(integrated_s2)

print('Compute metrics', flush=True)
n_batches = len(integrated_s1.obs.batch.unique())
n_celltypes = len(integrated_s1.obs.cell_type.unique())

print("Compute iLisi and cLisi for split 1", flush=True)
knn = sm.nearest_neighbors.pynndescent(integrated_s1.layers['integrated'], n_neighbors=100, random_state=0)

ilisi_s1_per_cell = sm.lisi_knn(knn, integrated_s1.obs.batch)
ilisi_s1 = (np.nanmedian(ilisi_s1_per_cell) - 1) / (n_batches - 1)

clisi_s1_per_cell = sm.lisi_knn(knn, integrated_s1.obs.cell_type)
clisi_s1 = (n_celltypes - np.nanmedian(clisi_s1_per_cell)) / (n_celltypes - 1)

print("Compute iLisi and cLisi for split 2", flush=True)
knn = sm.nearest_neighbors.pynndescent(integrated_s2.layers['integrated'], n_neighbors=100, random_state=0)
ilisi_s2_per_cell = sm.lisi_knn(knn, integrated_s2.obs.batch)
ilisi_s2 = (np.nanmedian(ilisi_s2_per_cell) - 1) / (n_batches - 1)

clisi_s2_per_cell = sm.lisi_knn(knn, integrated_s2.obs.cell_type)
clisi_s2 = (n_celltypes - np.nanmedian(clisi_s2_per_cell)) / (n_celltypes - 1)

ilisi = np.mean([ilisi_s1, ilisi_s2])
clisi = np.mean([clisi_s1, clisi_s2])
uns_metric_ids = [ 'ilisi', 'clisi' ]
uns_metric_values = [ ilisi, clisi ]

print("Write output AnnData to file", flush=True)
output = ad.AnnData(
  uns={
        "dataset_id": integrated_s1.uns["dataset_id"],
        "method_id": integrated_s1.uns["method_id"],
        "metric_ids": uns_metric_ids,
        "metric_values": uns_metric_values,
        "ilisi_s1_index": ilisi_s1_per_cell,
        "ilisi_s2_index": ilisi_s2_per_cell,
        "clisi_s1_index": clisi_s1_per_cell,
        "clisi_s2_index": clisi_s2_per_cell
    }

)
output.write_h5ad(par['output'], compression='gzip')
