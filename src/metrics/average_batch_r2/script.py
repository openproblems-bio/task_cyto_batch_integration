import sys

import anndata as ad
import numpy as np

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    "input_validation": "resources_test/task_cyto_batch_integration/leomazzi_cyto_spleen_subset/validation.h5ad",
    "input_unintegrated": "resources_test/task_cyto_batch_integration/leomazzi_cyto_spleen_subset/unintegrated.h5ad",
    # "input_integrated": "resources_test/task_cyto_batch_integration/leomazzi_cyto_spleen_subset/perfect_integration/output.h5ad",
    "input_integrated": "resources_test/task_cyto_batch_integration/leomazzi_cyto_spleen_subset/perfect_integration/vertical_output.h5ad",
    "output": "output.h5ad",
}
meta = {"name": "average_batch_r2"}
## VIASH END

sys.path.append(meta["resources_dir"])
from helper import batch_r2, concat_paired_samples, fit_r2
from helper_functions import (
    get_obs_var_for_integrated,
    remove_unlabelled,
    subset_markers_tocorrect,
    subset_nocontrols,
)

print("Reading input files", flush=True)
input_validation = ad.read_h5ad(par["input_validation"])
input_unintegrated = ad.read_h5ad(par["input_unintegrated"])
input_integrated = ad.read_h5ad(par["input_integrated"])

print("Formatting input files", flush=True)
# Format data integrated data
input_integrated = get_obs_var_for_integrated(
    input_integrated, input_validation, input_unintegrated
)
input_integrated = subset_markers_tocorrect(input_integrated)
input_integrated = subset_nocontrols(input_integrated)
# Format validation data
input_validation = subset_markers_tocorrect(input_validation)

#### TEMPORARY SOLUTION: change the get_obs_var_for_integrated to return a different batch in case of perfect integration
## adding 3 to the batch number otherwise the batch number is the same for integrated and validation data
if "perfect_integration" in input_integrated.uns["method_id"]:
    input_integrated.obs["batch"] = input_integrated.obs["batch"] + 3
######################################################################################################################

print("Computing average_batch_r2 global", flush=True)

donor_list = input_validation.obs["donor"].unique()

r2_values = []
for donor in donor_list:
    integrated_view = input_integrated[input_integrated.obs["donor"] == donor]
    validation_view = input_validation[input_validation.obs["donor"] == donor]

    if (
        integrated_view.shape[0] < 10 or validation_view.shape[0] < 10
    ):  # Skip Rˆ2 calculation if there are less than 10 cells
        print(
            f"Warning: Rˆ2 not computed for donor {donor}. Too few cells were present: {integrated_view.shape[0]} for integrated and {validation_view.shape[0]} for validation"
        )
        continue

    r2_list, _ = batch_r2(integrated_view, validation_view)
    r2_values = [*r2_values, *r2_list]

average_batch_r2_global = np.mean(r2_values)


print("Computing average_batch_r2 cell-type specific", flush=True)

r2_values = []
for donor in donor_list:
    integrated_view = input_integrated[input_integrated.obs["donor"] == donor]
    integrated_view = remove_unlabelled(integrated_view)
    validation_view = input_validation[input_validation.obs["donor"] == donor]
    validation_view = remove_unlabelled(validation_view)

    ct_list = validation_view.obs["cell_type"].unique()

    for ct in ct_list:
        integrated_view_ct = integrated_view[integrated_view.obs["cell_type"] == ct]
        validation_view_ct = validation_view[validation_view.obs["cell_type"] == ct]
        if (
            integrated_view_ct.shape[0] < 10 or validation_view_ct.shape[0] < 10
        ):  # Skip Rˆ2 calculation if there are less than 10 cells
            print(
                f"Warning: Rˆ2 not computed for donor {donor} cell type {ct}. Too few cells were present: {integrated_view_ct.shape[0]} for integrated and {validation_view_ct.shape[0]} for validation"
            )
            continue

        r2_list, _ = batch_r2(integrated_view_ct, validation_view_ct)
        r2_values = [*r2_values, *r2_list]

average_batch_r2_ct = np.mean(r2_values)

uns_metric_ids = ["average_batch_r2_global", "average_batch_r2_ct"]
uns_metric_values = [average_batch_r2_global, average_batch_r2_ct]

print("Write output AnnData to file", flush=True)
output = ad.AnnData(
    uns={
        "dataset_id": input_integrated.uns["dataset_id"],
        "method_id": input_integrated.uns["method_id"],
        "metric_ids": uns_metric_ids,
        "metric_values": uns_metric_values,
    }
)
output.write_h5ad(par["output"], compression="gzip")
