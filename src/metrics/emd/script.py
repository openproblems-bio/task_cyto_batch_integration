import sys

import anndata as ad

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    "input_integrated_left": "resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/integrated_left.h5ad",
    "input_integrated_right": "resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/integrated_right.h5ad",
    "input_unintegrated": "resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/unintegrated.h5ad",
    "output": "resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/emd_out.h5ad",
}
meta = {"name": "emd", "resources_dir": "src/utils/helper_functions.py"}
## VIASH END

sys.path.append(meta["resources_dir"])

import helper as emd_helper
import helper_functions as global_helper

print("Reading input files", flush=True)

input_integrated_left = ad.read_h5ad(par["input_integrated_left"])
input_integrated_right = ad.read_h5ad(par["input_integrated_right"])
input_unintegrated = ad.read_h5ad(par["input_unintegrated"])

print("Formatting input files", flush=True)

# add obs and var to integrated data
input_integrated_left, input_integrated_right = (
    global_helper.get_obs_var_for_integrated(
        s1_adata=input_integrated_left,
        s2_adata=input_integrated_right,
        u_adata=input_unintegrated,
    )
)

# more preprocessing
input_integrated_left = global_helper.subset_markers_tocorrect(input_integrated_left)
input_integrated_left = global_helper.subset_nocontrols(input_integrated_left)
input_integrated_left = global_helper.remove_unlabelled(input_integrated_left)

input_integrated_right = global_helper.subset_markers_tocorrect(input_integrated_right)
input_integrated_right = global_helper.subset_nocontrols(input_integrated_right)
input_integrated_right = global_helper.remove_unlabelled(input_integrated_right)


markers_to_assess = input_unintegrated.var_names[
    input_unintegrated.var["to_correct"]
].to_numpy()

# needed to assemble the output anndata later
dataset_id = input_unintegrated.uns["dataset_id"]
method_id = input_integrated_left.uns["method_id"]

# shouldn't need these anymore
# del input_unintegrated

# calculate horizontal EMD for each donor across integrated left and right
donor_list = input_integrated_left.obs["donor"].unique()

emd_horz = emd_helper.calculate_horizontal_emd(
    i_left_adata=input_integrated_left,
    i_right_adata=input_integrated_right,
    donor_list=donor_list,
    markers_to_assess=markers_to_assess,
)

# calculate vertical EMD
emd_vert = emd_helper.calculate_vertical_emd(
    i_left_adata=input_integrated_left,
    i_right_adata=input_integrated_right,
    markers_to_assess=markers_to_assess,
)

print("Assembling output AnnData", flush=True)
# note: emd_values is handy for plotting later on.
output = ad.AnnData(
    uns={
        "dataset_id": dataset_id,
        "method_id": method_id,
        "metric_ids": [
            "emd_mean_global_horiz",
            "emd_max_global_horiz",
            "emd_mean_ct_horiz",
            "emd_max_ct_horiz",
            "emd_mean_global_vert",
            "emd_max_global_vert",
            "emd_mean_ct_vert",
            "emd_max_ct_vert",
        ],
        "metric_values": [
            emd_horz[emd_helper.KEY_MEAN_EMD_GLOBAL],
            emd_horz[emd_helper.KEY_MAX_EMD_GLOBAL],
            emd_horz[emd_helper.KEY_MEAN_EMD_CT],
            emd_horz[emd_helper.KEY_MAX_EMD_CT],
            emd_vert[emd_helper.KEY_MEAN_EMD_GLOBAL],
            emd_vert[emd_helper.KEY_MAX_EMD_GLOBAL],
            emd_vert[emd_helper.KEY_MEAN_EMD_CT],
            emd_vert[emd_helper.KEY_MAX_EMD_CT],
        ],
        "emd_values": {
            "emd_values_horiz": emd_horz[emd_helper.KEY_EMD_HORZ_PER_DONOR],
            "emd_values_vert_left": emd_vert[emd_helper.KEY_EMD_VERT_MAT_LEFT],
            "emd_values_vert_right": emd_vert[emd_helper.KEY_EMD_VERT_MAT_RIGHT],
        },
    }
)

print("Write output AnnData to file", flush=True)
output.write_h5ad(par["output"], compression="gzip")
