import sys

import anndata as ad
import cytonormpy as cnp
import numpy as np
import pandas as pd

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    "input_integrated": "resources_test/task_cyto_batch_integration/starter_file/output.h5ad",
    "input_unintegrated": "resources_test/task_cyto_batch_integration/starter_file/unintegrated.h5ad",
    "input_validation": "resources_test/task_cyto_batch_integration/starter_file/validation.h5ad",
    "output": "output.h5ad",
}
meta = {"name": "emd_per_samples"}
## VIASH END

sys.path.append(meta["resources_dir"])
from helper_functions import get_obs_for_integrated

print("Reading input files", flush=True)

input_integrated = ad.read_h5ad(par["input_integrated"])
input_unintegrated = ad.read_h5ad(par["input_unintegrated"])
input_validation = ad.read_h5ad(par["input_validation"])

input_integrated = get_obs_for_integrated(
    input_integrated=input_integrated,
    input_unintegrated=input_unintegrated,
    input_validation=input_validation
)

# concatenate all input into one giant anndata
input_concat = ad.concat([input_integrated, input_validation])
input_concat.layers["data"] = np.concatenate(
    (
        input_integrated.layers["integrated"],
        input_validation.layers["preprocessed"],
    )
)

markers_to_assess = input_unintegrated.var[
    input_unintegrated.var["to_correct"]
].index.to_numpy()

# keep only markers we need to assess
input_concat = input_concat[:, markers_to_assess]

# remove control samples as we won't be assessing these
input_concat = input_concat[input_concat.obs['is_control'] == 0]

# needed to assemble the output anndata later
dataset_id = input_integrated.uns["dataset_id"]
method_id = input_integrated.uns["method_id"]

# shouldn't need these anymore
del input_unintegrated
del input_integrated
del input_validation

donors = input_concat.obs['donor'].unique()

emd_df = []
emd_vals = []

for donor in donors:
    # donor = donors[0]
    input_donor = input_concat[input_concat.obs['donor'] == donor]

    # have to change the "sample" column to file_name for emd_comparison_from_anndata to work.
    # Otherwise the _calculate_emd_per_frame used in cytonormpy will error because they
    # harcoded the column file_name and use it in assert.
    # See line 176 of https://github.com/TarikExner/CytoNormPy/blob/main/cytonormpy/_evaluation/_emd_utils.py#L173
    input_donor.obs.rename(columns={'sample': 'file_name'}, inplace=True)

    emd_integrated = cnp.emd_from_anndata(
        adata=input_donor,
        file_list=list(input_donor.obs['file_name'].unique()),
        channels=markers_to_assess,
        layer="data",
        sample_identifier_column="file_name",
        cell_labels="cell_type"
    )
    
    emd_integrated['donor'] = donor
    emd_df.append(emd_integrated.copy())
    
    # ignoring unlabeled and all_cells
    emd_integrated.drop(index=['all_cells', 'Unlabeled'], inplace=True)
    
    emd_vals.extend(emd_integrated[markers_to_assess].to_numpy().flatten())
    
emd_df = pd.concat(emd_df)

print("Assembling output AnnData", flush=True)
output = ad.AnnData(
    uns={
        "dataset_id": dataset_id,
        "method_id": method_id,
        "metric_ids": ["emd_mean", "emd_max"],
        "metric_values": [np.nanmean(emd_vals), np.nanmax(emd_vals)],
        "emd_values": emd_df
    }
)

print("Write output AnnData to file", flush=True)
output.write_h5ad(par["output"], compression="gzip")
