import sys

import anndata as ad
import numpy as np
import pandas as pd

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    "input_integrated": "resources_test/task_cyto_batch_integration/cyto_spleen_subset/integrated.h5ad",
    "input_unintegrated": "resources_test/task_cyto_batch_integration/cyto_spleen_subset/unintegrated.h5ad",
    "input_validation": "resources_test/task_cyto_batch_integration/cyto_spleen_subset/validation.h5ad",
    "output": "output.h5ad",
}
meta = {"name": "emd"}
## VIASH END

sys.path.append(meta["resources_dir"])
from helper import compute_emd
from helper_functions import (
    get_obs_var_for_integrated,
    remove_unlabelled,
    subset_markers_tocorrect,
    subset_nocontrols,
)

print("Reading input files", flush=True)

input_integrated = ad.read_h5ad(par["input_integrated"])
input_unintegrated = ad.read_h5ad(par["input_unintegrated"])
input_validation = ad.read_h5ad(par["input_validation"])

print('Formatting input files', flush=True)
# Format data integrated data
input_integrated = get_obs_var_for_integrated(
    i_adata=input_integrated,
    v_adata=input_validation,
    u_adata=input_unintegrated
)
input_integrated = subset_markers_tocorrect(input_integrated)
input_integrated = subset_nocontrols(input_integrated)
input_integrated = remove_unlabelled(input_integrated)


# Format validation data
input_validation = subset_markers_tocorrect(input_validation)
input_validation = remove_unlabelled(input_validation)

markers_to_assess = input_validation.var["to_correct"].index.to_numpy()

# needed to assemble the output anndata later
dataset_id = input_integrated.uns["dataset_id"]
method_id = input_integrated.uns["method_id"]

# shouldn't need these anymore
# del input_unintegrated

# get all donors invalidation as these are the ones we need to validate
donor_list = input_validation.obs['donor'].unique()

emd_per_donor_per_ct = []
emd_per_donor_all_ct = []

for donor in donor_list:
    # donor = donor_list[0]
    
    integrated_view = input_integrated[input_integrated.obs['donor'] == donor]
    validation_view = input_validation[input_validation.obs['donor'] == donor]
    
    # assuming each cell type is present in both validation and integrated
    cell_types = validation_view.obs['cell_type'].unique()
    
    for cell_type in cell_types:
        # cell_type = cell_types[0]
        
        integrated_ct = integrated_view[integrated_view.obs['cell_type'] == cell_type]
        validation_ct = validation_view[validation_view.obs['cell_type'] == cell_type]
        
        # Do not calculate if we have less than 50 cells as it does not make sense.
        if integrated_ct.n_obs < 50 or validation_ct.n_obs < 50:
            continue
        
        emd_df = compute_emd(
            integrated_ct = integrated_ct, 
            validation_ct = validation_ct, 
            markers_to_assess = markers_to_assess
        )
        emd_df['cell_type'] = cell_type
        emd_df['donor'] = donor
        
        emd_per_donor_per_ct.append(emd_df)
    
    # calculate EMD when combining all cell types as well.
    emd_df = compute_emd(
        integrated_ct = integrated_view, 
        validation_ct = validation_view, 
        markers_to_assess = markers_to_assess
    )
    emd_df['cell_type'] = 'all_cell_types'
    emd_df['donor'] = donor
    
    emd_per_donor_all_ct.append(emd_df)
    
emd_per_donor_per_ct = pd.concat(emd_per_donor_per_ct)
emd_per_donor_all_ct = pd.concat(emd_per_donor_all_ct)


emd_mean_ct = np.nanmean(emd_per_donor_per_ct.drop(columns=['cell_type', 'donor']).values)
emd_max_ct = np.nanmax(emd_per_donor_per_ct.drop(columns=['cell_type', 'donor']).values)

emd_mean_dn = np.nanmean(emd_per_donor_all_ct.drop(columns=['cell_type', 'donor']).values)
emd_max_dn = np.nanmax(emd_per_donor_all_ct.drop(columns=['cell_type', 'donor']).values)

print("Assembling output AnnData", flush=True)
output = ad.AnnData(
    uns={
        "dataset_id": dataset_id,
        "method_id": method_id,
        "metric_ids": ["emd_mean_ct", "emd_max_ct", "emd_mean_dn", "emd_max_dn"],
        "metric_values": [emd_mean_ct, emd_max_ct, emd_mean_dn, emd_max_dn],
        "emd_values": pd.concat([emd_per_donor_per_ct, emd_per_donor_all_ct])
    }
)

print("Write output AnnData to file", flush=True)
output.write_h5ad(par["output"], compression="gzip")
