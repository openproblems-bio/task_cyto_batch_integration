import sys

import anndata as ad

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    "input_integrated": "resources_test/cytonorm_data_full/human_blood_mass_cytometry.cycombine_nocontrols.cycombine_nocontrols.output.h5ad",
    "input_unintegrated": "resources_test/cytonorm_data_full/human_blood_mass_cytometry.process_dataset.output_unintegrated.h5ad",
    "input_validation": "resources_test/cytonorm_data_full/human_blood_mass_cytometry.process_dataset.output_validation.h5ad",
    "output": "resources_test/task_cyto_batch_integration/mouse_spleen_flow_cytometry_subset/perfect_integration/vertical_emd.h5ad",
}
meta = {"name": "emd"}
## VIASH END

sys.path.append(meta["resources_dir"])

import helper as emd_helper
import helper_functions as global_helper

print("Reading input files", flush=True)

input_integrated = ad.read_h5ad(par["input_integrated"])
input_unintegrated = ad.read_h5ad(par["input_unintegrated"])
input_validation = ad.read_h5ad(par["input_validation"])

print("Formatting input files", flush=True)

# Format data integrated data
input_integrated = global_helper.get_obs_var_for_integrated(
    i_adata=input_integrated, v_adata=input_validation, u_adata=input_unintegrated
)
input_integrated = global_helper.subset_markers_tocorrect(input_integrated)
input_integrated = global_helper.subset_nocontrols(input_integrated)
input_integrated = global_helper.remove_unlabelled(input_integrated)


# Format validation data
input_validation = global_helper.subset_markers_tocorrect(input_validation)
input_validation = global_helper.remove_unlabelled(input_validation)

markers_to_assess = input_validation.var["to_correct"].index.to_numpy()

# needed to assemble the output anndata later
dataset_id = input_integrated.uns["dataset_id"]
method_id = input_integrated.uns["method_id"]

# shouldn't need these anymore
# del input_unintegrated

# calculate horizontal EMD
# get all donors in validation as these are the ones we need to validate
donor_list = input_validation.obs["donor"].unique()

emd_horz = emd_helper.calculate_horizontal_emd(
    input_integrated, input_validation, markers_to_assess, donor_list
)

# calculate vertical EMD
emd_vert = emd_helper.calculate_vertical_emd(
    input_integrated=input_integrated,
    markers_to_assess=markers_to_assess,
)

print("Assembling output AnnData", flush=True)
# note: emd_values is handy for plotting later on.
output = ad.AnnData(
    uns={
        "dataset_id": dataset_id,
        "method_id": method_id,
        "metric_ids": [
            "emd_mean_global_horiz",
            "emd_max_global_horiz",
            "emd_mean_ct_horiz",
            "emd_max_ct_horiz",
            "emd_mean_global_vert",
            "emd_max_global_vert",
            "emd_mean_ct_vert",
            "emd_max_ct_vert",
        ],
        "metric_values": [
            emd_horz[emd_helper.KEY_MEAN_EMD_GLOBAL],
            emd_horz[emd_helper.KEY_MAX_EMD_GLOBAL],
            emd_horz[emd_helper.KEY_MEAN_EMD_CT],
            emd_horz[emd_helper.KEY_MAX_EMD_CT],
            emd_vert[emd_helper.KEY_MEAN_EMD_GLOBAL],
            emd_vert[emd_helper.KEY_MAX_EMD_GLOBAL],
            emd_vert[emd_helper.KEY_MEAN_EMD_CT],
            emd_vert[emd_helper.KEY_MAX_EMD_CT],
        ],
        "emd_values": {
            "emd_values_horiz": emd_horz[emd_helper.KEY_EMD_HORZ_PER_DONOR],
            "emd_values_vert": emd_vert[emd_helper.KEY_EMD_VERT_MAT],
        },
    }
)

print("Write output AnnData to file", flush=True)
output.write_h5ad(par["output"], compression="gzip")
