manifest {
  name = 'methods/cytonorm_no_controls_to_goal'
  mainScript = 'main.nf'
  nextflowVersion = '!>=20.12.1-edge'
  version = 'build_fix_failed_stuff'
  description = 'CytoNorm corrects batch effects by using reference control samples (aliquots of one sample, \ntechnical replicates) included with each batch. \nIt clusters cells using FlowSOM, then trains a model on the control samples to learn how marker \nexpression distributions differ across batches for each population.\nIt then uses splines to align these distributions to a common reference (either a midpoint\nderived from all batches or to a single batch).\n\nIn this CytoNorm version, an aggregate of each batch is created and subsequently used as a \nproxy for the control samples, aligning the batches to batch 1.\n\nThe number of cells used to create an aggregate is set as the number of cells in the smallest \nsample or 1,000,000, whichever is the smaller, multiplied by how many samples there are in the batch.\nClustering was performed by FlowSOM.\nThe size of the SOM grid is varied linearly between value of 6-16, with default set to 15\nfollowing the default value provided by CytoNorm.\nThe number of metaclusters is varied linearly between value of 8-20, with default set to 10\nfollowing the default value provided by CytoNorm.\nThe number of cells clustered by FlowSOM is set as the number of cells in the smallest \naggregate or 1,000,000, whichever is the smaller, multiplied by how many batches there are in the data\n(because 1 aggregate = 1 batch).\n'
}

process.container = 'nextflow/bash:latest'

// detect tempdir
tempDir = java.nio.file.Paths.get(
  System.getenv('NXF_TEMP') ?:
    System.getenv('VIASH_TEMP') ?: 
    System.getenv('TEMPDIR') ?: 
    System.getenv('TMPDIR') ?: 
    '/tmp'
).toAbsolutePath()

profiles {
  no_publish {
    process {
      withName: '.*' {
        publishDir = [
          enabled: false
        ]
      }
    }
  }
  mount_temp {
    docker.temp            = tempDir
    podman.temp            = tempDir
    charliecloud.temp      = tempDir
  }
  docker {
    docker.enabled         = true
    // docker.userEmulation   = true
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  podman {
    podman.enabled         = true
    docker.enabled         = false
    singularity.enabled    = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  shifter {
    shifter.enabled        = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    charliecloud.enabled   = false
  }
  charliecloud {
    charliecloud.enabled   = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
  }
}

process{
  withLabel: lowmem { memory = 20.Gb }
  withLabel: midmem { memory = 50.Gb }
  withLabel: highmem { memory = 100.Gb }
  withLabel: lowcpu { cpus = 5 }
  withLabel: midcpu { cpus = 15 }
  withLabel: highcpu { cpus = 30 }
  withLabel: lowtime { time = 1.h }
  withLabel: midtime { time = 4.h }
  withLabel: hightime { time = 8.h }
  withLabel: veryhightime { time = 24.h }
}


